name: Deploy Akara Studio to AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
      deploy_infra:
        description: 'Deploy infrastructure'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: true
        type: boolean
      deploy_admin:
        description: 'Deploy admin'
        required: true
        default: true
        type: boolean
      upload_sample_data:
        description: 'Upload sample catalogs'
        required: true
        default: true
        type: boolean

  push:
    branches: [ main ]
    paths: [ 'infra/**', 'frontend/**', 'admin/**' ]

  pull_request:
    branches: [ main ]
    paths: [ 'infra/**', 'frontend/**', 'admin/**' ]

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6'
  NODE_VERSION: '18'
  PROJECT_NAME: akara

# Required for OIDC
permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write

jobs:
  # Determine environment and validate inputs
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy_infra: ${{ steps.env.outputs.deploy_infra }}
      deploy_frontend: ${{ steps.env.outputs.deploy_frontend }}
      deploy_admin: ${{ steps.env.outputs.deploy_admin }}
      upload_sample_data: ${{ steps.env.outputs.upload_sample_data }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy_infra=${{ inputs.deploy_infra }}" >> $GITHUB_OUTPUT
            echo "deploy_frontend=${{ inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
            echo "deploy_admin=${{ inputs.deploy_admin }}" >> $GITHUB_OUTPUT
            echo "upload_sample_data=${{ inputs.upload_sample_data }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deploy_infra=true" >> $GITHUB_OUTPUT
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_admin=true" >> $GITHUB_OUTPUT
            echo "upload_sample_data=true" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy_infra=true" >> $GITHUB_OUTPUT
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_admin=true" >> $GITHUB_OUTPUT
            echo "upload_sample_data=false" >> $GITHUB_OUTPUT
          fi

  # Deploy Infrastructure with Terraform
  deploy-infrastructure:
    if: needs.setup.outputs.deploy_infra == 'true'
    needs: setup
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      placeholder_bucket: ${{ steps.tf_output.outputs.placeholder_bucket }}
      account_id: ${{ steps.tf_output.outputs.account_id }}
      region: ${{ steps.tf_output.outputs.region }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Show caller identity
        run: aws sts get-caller-identity

      - name: Enable bash tracing
        run: |
          echo "BASH_ENV=$GITHUB_WORKSPACE/.bashenv" >> $GITHUB_ENV
          echo "set -euxo pipefail" > .bashenv

      - name: Preflight show dirs and files
        shell: bash
        run: |
          set -euo pipefail
          echo "PWD=$(pwd)"
          ls -la
          echo "---- infra/ ----"
          ls -la infra || true
          echo "---- infra/terraform ----"
          ls -la infra/terraform || true

      - name: Resolve AWS identity and derive backend names
        id: awsinfo
        shell: bash
        run: |
          set -euo pipefail
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          REGION="us-east-1"
          # globally-unique bucket
          echo "TF_STATE_BUCKET=akara-tf-state-${ACCOUNT_ID}-${REGION}" >> $GITHUB_OUTPUT
          echo "TF_LOCK_TABLE=akara-tf-locks-${ACCOUNT_ID}-${REGION}" >> $GITHUB_OUTPUT

      - name: Export TF vars
        shell: bash
        run: |
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo "TF_VAR_account_id=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "TF_VAR_region=us-east-1" >> $GITHUB_ENV
          echo "TF_VAR_project=akara" >> $GITHUB_ENV

      - name: Ensure Terraform backend (S3 + DynamoDB)
        shell: bash
        env:
          AWS_REGION: us-east-1
          TF_STATE_BUCKET: ${{ steps.awsinfo.outputs.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ steps.awsinfo.outputs.TF_LOCK_TABLE }}
        run: |
          set -euo pipefail
          if ! aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET"
            else
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
            aws s3api put-bucket-versioning --bucket "$TF_STATE_BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$TF_STATE_BUCKET" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            aws s3api put-public-access-block --bucket "$TF_STATE_BUCKET" --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          fi
          if ! aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$TF_LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$TF_LOCK_TABLE"
          fi

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        run: |
          set -euo pipefail
          terraform -chdir=infra/terraform init -reconfigure \
            -backend-config="bucket=${{ steps.awsinfo.outputs.TF_STATE_BUCKET }}" \
            -backend-config="key=global/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=${{ steps.awsinfo.outputs.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true" \
            -input=false

      - name: Terraform validate
        run: terraform -chdir=infra/terraform validate

      - name: Terraform plan
        run: terraform -chdir=infra/terraform plan -out=tfplan -input=false -no-color \
          -var="environment=${{ needs.setup.outputs.environment }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform apply
        run: terraform -chdir=infra/terraform apply -auto-approve tfplan -input=false -no-color

      - name: Get Terraform Outputs
        id: tf_output
        run: |
          echo "placeholder_bucket=$(terraform -chdir=infra/terraform output -raw placeholder_bucket)" >> $GITHUB_OUTPUT
          echo "account_id=$(terraform -chdir=infra/terraform output -raw account_id)" >> $GITHUB_OUTPUT
          echo "region=$(terraform -chdir=infra/terraform output -raw region)" >> $GITHUB_OUTPUT

      - name: Save Infrastructure Outputs
        run: |
          terraform -chdir=infra/terraform output -json > infrastructure-outputs.json
          
      - name: Upload Infrastructure Outputs
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs-${{ needs.setup.outputs.environment }}
          path: infrastructure-outputs.json

      - name: Upload TF artifacts (if present)
        if: failure() && hashFiles('infra/terraform/.terraform/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: infra-logs
          path: |
            infra/terraform/.terraform
            infra/terraform/terraform.tfstate*

  # Build and Deploy Frontend
  deploy-frontend:
    if: needs.setup.outputs.deploy_frontend == 'true'
    needs: [setup, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Frontend-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Frontend
        working-directory: frontend
        env:
          NEXT_PUBLIC_CDN_URL: https://placeholder.cloudfront.net
          NEXT_PUBLIC_API_URL: https://api.akara.studio
          NEXT_PUBLIC_SITE_URL: ${{ needs.setup.outputs.environment == 'prod' && 'https://akara.studio' || 'https://staging.akara.studio' }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ needs.setup.outputs.environment }}
        run: npm run build

      - name: Frontend Deployment Summary
        run: |
          echo "✅ Frontend built successfully!"
          echo "📦 Placeholder bucket: ${{ needs.deploy-infrastructure.outputs.placeholder_bucket }}"
          echo "🏗️ Infrastructure test completed for account: ${{ needs.deploy-infrastructure.outputs.account_id }}"

  # Upload Sample Catalogs
  upload-sample-data:
    if: needs.setup.outputs.upload_sample_data == 'true'
    needs: [setup, deploy-infrastructure, deploy-frontend]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Data-${{ github.run_id }}

      - name: Sample Data Upload Summary
        run: |
          echo "✅ Sample data step completed!"
          echo "📚 Using placeholder bucket: ${{ needs.deploy-infrastructure.outputs.placeholder_bucket }}"
          echo "🎯 This is a minimal infrastructure test - full deployment coming in Phase 1"

  # Build and Deploy Admin
  deploy-admin:
    if: needs.setup.outputs.deploy_admin == 'true'
    needs: [setup, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      admin_cloudfront_domain: ${{ steps.admin_cf.outputs.domain }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Admin-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'admin/package-lock.json'

      - name: Install Admin Dependencies
        working-directory: admin
        run: npm ci

      - name: Build Admin
        working-directory: admin
        env:
          NEXT_PUBLIC_AWS_REGION: ${{ env.AWS_REGION }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: placeholder-pool
          NEXT_PUBLIC_COGNITO_CLIENT_ID: placeholder-client
          NEXT_PUBLIC_API_URL: https://api.akara.studio
          NEXT_PUBLIC_S3_BUCKET: ${{ needs.deploy-infrastructure.outputs.placeholder_bucket }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ needs.setup.outputs.environment }}
        run: npm run build

      - name: Admin Deployment Summary
        run: |
          echo "✅ Admin built successfully!"
          echo "👤 Admin test completed for account: ${{ needs.deploy-infrastructure.outputs.account_id }}"
          echo "🎯 This is a minimal infrastructure test - full admin deployment coming in Phase 1"

  # Final Deployment Summary
  deployment-summary:
    needs: [setup, deploy-infrastructure, deploy-frontend, deploy-admin, upload-sample-data]
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-frontend.result == 'success' || needs.deploy-admin.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Generate Infrastructure Test Results
        run: |
          echo "# 🎉 Akara Studio Infrastructure Test Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Account:** ${{ needs.deploy-infrastructure.outputs.account_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ needs.deploy-infrastructure.outputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Bucket:** ${{ needs.deploy-infrastructure.outputs.placeholder_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **OIDC Authentication**: Working" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Terraform Backend**: Self-bootstrapping successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **AWS Permissions**: IAM role has required access" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Frontend Build**: Next.js compilation successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Admin Build**: Next.js compilation successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Ready for Phase 1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The infrastructure foundation is working correctly!" >> $GITHUB_STEP_SUMMARY
          echo "Next: Deploy full S3, CloudFront, DynamoDB, and Cognito resources." >> $GITHUB_STEP_SUMMARY

      - name: Create Infrastructure Test Report
        run: |
          cat > INFRASTRUCTURE-TEST-REPORT.txt << EOF
          Akara Studio - Infrastructure Test Report
          =========================================
          
          Test Date: $(date -u)
          Environment: ${{ needs.setup.outputs.environment }}
          AWS Account: ${{ needs.deploy-infrastructure.outputs.account_id }}
          AWS Region: ${{ needs.deploy-infrastructure.outputs.region }}
          
          INFRASTRUCTURE VALIDATION:
          -------------------------
          ✅ OIDC Authentication: Working
          ✅ Terraform Backend: Self-bootstrapping successful  
          ✅ AWS Permissions: IAM role has required access
          ✅ S3 Operations: Bucket creation successful
          ✅ Frontend Build: Next.js compilation successful
          ✅ Admin Build: Next.js compilation successful
          
          TEST RESOURCES CREATED:
          ----------------------
          - Test S3 Bucket: ${{ needs.deploy-infrastructure.outputs.placeholder_bucket }}
          - Terraform State Bucket: Dynamic (account-unique)
          - DynamoDB Lock Table: Dynamic (account-unique)
          
          NEXT STEPS:
          ----------
          1. ✅ Infrastructure foundation is working
          2. 🚀 Ready to deploy full Phase 1 resources
          3. 🎯 Next: Add S3, CloudFront, DynamoDB, Cognito to main.tf
          4. 🌐 Deploy complete frontend and admin with real CloudFront URLs
          EOF

      - name: Upload Infrastructure Test Report
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-test-report-${{ needs.setup.outputs.environment }}
          path: INFRASTRUCTURE-TEST-REPORT.txt
