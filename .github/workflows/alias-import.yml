name: Import CloudFront Alias Owner

on:
  workflow_dispatch:
    inputs:
      frontend_distribution_id:
        description: "Existing CloudFront Distribution ID that currently owns www.akara.studio"
        required: false
      admin_distribution_id:
        description: "Existing CloudFront Distribution ID that currently owns admin.akara.studio"
        required: false

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: us-east-1

jobs:
  import-admin-dist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Preflight
        run: |
          set -euo pipefail
          aws sts get-caller-identity
          ls -la infra/terraform

      - name: Bootstrap TF backend (account-unique)
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          STATE_BUCKET="akara-tf-state-${ACCOUNT_ID}-${AWS_REGION}"
          LOCK_TABLE="akara-tf-locks-${ACCOUNT_ID}-${AWS_REGION}"

          aws s3api head-bucket --bucket "$STATE_BUCKET" 2>/dev/null || \
            aws s3api create-bucket --bucket "$STATE_BUCKET" --create-bucket-configuration LocationConstraint=${AWS_REGION} || true
          aws s3api put-bucket-versioning --bucket "$STATE_BUCKET" --versioning-configuration Status=Enabled || true
          aws dynamodb describe-table --table-name "$LOCK_TABLE" >/dev/null 2>&1 || \
            aws dynamodb create-table \
              --table-name "$LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST || true

      - name: Terraform init (dynamic backend)
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          terraform -chdir=infra/terraform init -reconfigure \
            -backend-config="bucket=akara-tf-state-${ACCOUNT_ID}-${AWS_REGION}" \
            -backend-config="key=global/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=akara-tf-locks-${ACCOUNT_ID}-${AWS_REGION}"

      - name: Set required TF vars
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "TF_VAR_account_id=${ACCOUNT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_region=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_project=akara" >> $GITHUB_ENV
          echo "TF_VAR_frontend_domain=www.akara.studio" >> $GITHUB_ENV
          echo "TF_VAR_admin_domain=admin.akara.studio" >> $GITHUB_ENV
          if [ -n "${{ secrets.ACM_CERT_ARN }}" ]; then
            echo "TF_VAR_acm_certificate_arn=${{ secrets.ACM_CERT_ARN }}" >> $GITHUB_ENV
          fi

      - name: Import existing distributions into Terraform state
        run: |
          set -euo pipefail
          
          if [ -n "${{ github.event.inputs.frontend_distribution_id }}" ]; then
            FRONTEND_ID="${{ github.event.inputs.frontend_distribution_id }}"
            echo "Importing frontend CloudFront distribution $FRONTEND_ID as aws_cloudfront_distribution.frontend"
            terraform -chdir=infra/terraform import aws_cloudfront_distribution.frontend "${FRONTEND_ID}" || echo "Frontend import failed or already exists"
          fi
          
          if [ -n "${{ github.event.inputs.admin_distribution_id }}" ]; then
            ADMIN_ID="${{ github.event.inputs.admin_distribution_id }}"
            echo "Importing admin CloudFront distribution $ADMIN_ID as aws_cloudfront_distribution.admin"
            terraform -chdir=infra/terraform import aws_cloudfront_distribution.admin "${ADMIN_ID}" || echo "Admin import failed or already exists"
          fi

      - name: Plan to reconcile config with imported distribution
        run: |
          set -euo pipefail
          echo "Planning changes to reconcile imported distribution with desired configuration..."
          terraform -chdir=infra/terraform plan -no-color

      - name: Import Summary
        run: |
          if [ -n "${{ github.event.inputs.frontend_distribution_id }}" ]; then
            echo "‚úÖ Frontend import completed for distribution: ${{ github.event.inputs.frontend_distribution_id }}"
          fi
          if [ -n "${{ github.event.inputs.admin_distribution_id }}" ]; then
            echo "‚úÖ Admin import completed for distribution: ${{ github.event.inputs.admin_distribution_id }}"
          fi
          echo "üîç Check the plan output above to see what changes Terraform will make"
          echo "üöÄ Next: Run the main 'Deploy Akara Studio to AWS' workflow"
          echo "   The imported distributions will be updated to match your configuration"
